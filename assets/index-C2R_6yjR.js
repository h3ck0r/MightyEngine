import{vec3 as p,mat4 as b}from"https://cdn.jsdelivr.net/npm/gl-matrix@3.4.3/+esm";import{GLTFLoader as D}from"https://cdn.jsdelivr.net/npm/three@0.174.0/examples/jsm/loaders/GLTFLoader.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function r(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();async function V(o){return new Promise((t,e)=>{new D().load(o,i=>{const n=[];i.scene.traverse(s=>{if(s.isMesh){const u=[],l=[];let d=0;const c=s.geometry.attributes.position.array,h=s.geometry.attributes.normal?s.geometry.attributes.normal.array:null,g=s.geometry.attributes.uv?s.geometry.attributes.uv.array:null,y=s.geometry.index?s.geometry.index.array:null,m=s.geometry.attributes.tangent?s.geometry.attributes.tangent.array:null,x=s.material||null;for(let f=0;f<c.length;f+=3)u.push(c[f],c[f+1],c[f+2],h?h[f]:0,h?h[f+1]:0,h?h[f+2]:1,g?g[f/3*2]:0,g?g[f/3*2+1]:0,m?m[f]:1,m?m[f+1]:0,m?m[f+2]:0,m?m[f+3]:1);if(y)for(let f=0;f<y.length;f++)l.push(y[f]+d);d+=c.length/3,n.push({name:s.name,vertices:new Float32Array(u),indices:new Uint32Array(l),material:x})}}),t(n)},void 0,e)})}async function B(o){return await(await fetch(o)).text()}function P(o,t,e=null,r=!0,i=!0){let s={colorAttachments:[{view:t,loadOp:r?"clear":"load",clearValue:{r:.15,g:.15,b:.2,a:1},storeOp:"store"}]};return e&&(s.depthStencilAttachment={view:e,depthLoadOp:i?"clear":"load",depthClearValue:1,depthStoreOp:"store"}),o.beginRenderPass(s)}async function N(o,t){const e=await Promise.all(t.map(u=>fetch(u).then(l=>l.blob()))),r=await Promise.all(e.map(u=>createImageBitmap(u))),i=r[0].width,n=r[0].height,s=o.createTexture({size:[i,n,6],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d"});for(let u=0;u<6;u++)o.queue.copyExternalImageToTexture({source:r[u]},{texture:s,origin:[0,0,u]},[i,n,1]);return s}function I(o,t,e,r,i,n,s){return o.createBindGroup({layout:t.mainBindGroupLayout,entries:[{binding:0,resource:{buffer:e.mvpBuffer}},{binding:1,resource:{buffer:r}},{binding:2,resource:{buffer:e.cameraPositionBuffer}},{binding:3,resource:{buffer:e.globalLightDirectionBuffer}},{binding:4,resource:{buffer:i}},{binding:5,resource:{buffer:n}},{binding:6,resource:s.albedoTexture.createView()},{binding:7,resource:s.albedoSampler},{binding:8,resource:s.normalTexture.createView()},{binding:9,resource:s.normalSampler},{binding:10,resource:s.roughnessTexture.createView()},{binding:11,resource:s.roughnessSampler},{binding:12,resource:s.metalnessTexture.createView()},{binding:13,resource:s.metalnessSampler},{binding:14,resource:s.specularColorTexture.createView()},{binding:15,resource:s.specularColorSampler},{binding:16,resource:{buffer:s.materialAttributesBuffer}},{binding:17,resource:{buffer:e.graphicsSettingsBuffer}}]})}const a={lightDirection:new Float32Array([10,10,0,1]),bloomStr:new Float32Array([.1,0,0]),cameraPosition:new Float32Array([0,1,1]),graphicsSettings:{enableLightSpheres:!1},cameraRotation:[0,0],keyboardKeys:{},mouseDelta:{x:0,y:0},aspect:1,mouseSensitivity:.002,moveSpeed:.01,baseMoveSpeed:.01,nearCamera:.01,farCamer:100};function j(o,t,e){const r=o.createTexture({size:[t.width,t.height,1],format:e,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),i=o.createTexture({size:[t.width/2,t.height/2,1],format:e,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT}),n=o.createTexture({size:[t.width/2,t.height/2,1],format:e,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT}),s=o.createTexture({size:[t.width/2,t.height/2,1],format:e,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT}),u=r.createView(),l=i.createView(),d=n.createView(),c=s.createView();return{sceneTextureView:u,bloomTextureView:l,blurVTextureView:d,blurHTextureView:c}}function q(o,t,e,r){const i=o.createSampler({magFilter:"linear",minFilter:"linear"}),n=o.createSampler({magFilter:"linear",minFilter:"linear"}),s=o.createBindGroup({layout:t.postProcessBindGroupLayout,entries:[{binding:0,resource:e.sceneTextureView},{binding:1,resource:n},{binding:2,resource:e.blurVTextureView},{binding:3,resource:i},{binding:4,resource:{buffer:r.bloomStrBuffer}},{binding:5,resource:{buffer:r.graphicsSettingsBuffer}}]}),u=o.createBindGroup({layout:t.bloomBindGroupLayout,entries:[{binding:0,resource:e.sceneTextureView},{binding:1,resource:i}]}),l=o.createBindGroup({layout:t.bloomBindGroupLayout,entries:[{binding:0,resource:e.bloomTextureView},{binding:1,resource:i}]}),d=o.createBindGroup({layout:t.bloomBindGroupLayout,entries:[{binding:0,resource:e.blurHTextureView},{binding:1,resource:i}]});return{postProcessBindGroup:s,bloomBindGroup:u,blurVBindGroup:d,blurHBindGroup:l}}async function z(o){const t=await B("./shaders/main-shader.wgsl"),e=o.createShaderModule({label:"Main Shader",code:t}),r=await B("./shaders/skybox-shader.wgsl"),i=o.createShaderModule({label:"Skybox Shader",code:r}),n=await B("./shaders/postprocess.wgsl"),s=o.createShaderModule({label:"Postprocess Shader",code:n}),u=await B("./shaders/point-light.wgsl"),l=o.createShaderModule({label:"Point Light Shader",code:u}),d=await B("./shaders/bloom.wgsl"),c=o.createShaderModule({label:"Bloom Shader",code:d});return{mainShaderModule:e,skyboxShaderModule:i,postProcessShaderModule:s,pointLightShaderModule:l,bloomShaderModule:c}}async function _(){const o=document.querySelector("canvas"),t=window.devicePixelRatio||1;o.width=window.innerWidth*t,o.height=window.innerHeight*t,o.style.width=`${window.innerWidth}px`,o.style.height=`${window.innerHeight}px`;const e=o.getContext("webgpu");return{canvas:o,context:e}}async function Y(o){const t=o.createBuffer({label:"Uniform Buffer",size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),e=o.createBuffer({label:"Global Light Direction Buffer",size:4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});o.queue.writeBuffer(e,0,a.lightDirection);const r=o.createBuffer({label:"Camera Position Buffer",size:3*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});o.queue.writeBuffer(r,0,a.cameraPosition);const i=o.createBuffer({label:"Bloom Str Buffer",size:3*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});o.queue.writeBuffer(i,0,a.bloomStr);const n=o.createBuffer({label:"Graphics Settings Buffer",size:4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});return o.queue.writeBuffer(n,0,new Float32Array([0,0,0,0])),{mvpBuffer:t,globalLightDirectionBuffer:e,cameraPositionBuffer:r,bloomStrBuffer:i,graphicsSettingsBuffer:n}}async function X(o,t){return o.createTexture({size:[t.width,t.height,1],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}).createView()}async function H(){const{canvas:o,context:t}=await _();if(!navigator.gpu){alert("Your browser does not support WebGPU. Please use a browser like Google Chrome or Microsoft Edge."),console.error("WebGPU not supported");return}const e=await navigator.gpu.requestAdapter();if(!e){alert("No compatible GPU adapter found. Try updating your graphics drivers or using a different browser."),console.error("No adapter found");return}const r=await e.requestDevice();if(!r){alert("Your browser does not support WebGPU. Please use a browser like Google Chrome or Microsoft Edge."),console.error("Failed to create WebGPU device");return}r.addEventListener("uncapturederror",n=>console.error(n.error.message));const i=navigator.gpu.getPreferredCanvasFormat();if(t.configure({device:r,format:i}),a.aspect=o.width/o.height,!r||!t||!o||!i)throw new Error("Failed to setup");return{device:r,context:t,canvas:o,canvasFormat:i}}let O=performance.now(),M=0,v=0;const W=document.getElementById("fps-counter"),K=document.getElementById("player-coords"),$=document.getElementById("player-rotation"),J=document.getElementById("render-field"),Z=document.getElementById("exit-button"),Q=[document.querySelector("#input-lighting-x input"),document.querySelector("#input-lighting-y input"),document.querySelector("#input-lighting-z input"),document.querySelector("#input-lighting-w input")],ee=document.querySelector("#input-bloom-str input");function te(){const o=performance.now();M++,o-O>=1e3&&(v=M,M=0,O=o);const t=(1e3/(v||1)).toFixed(2);W.textContent=`FPS: ${v} | Frame Time: ${t}ms`,K.textContent=`x: ${a.cameraPosition[0].toFixed(3)} 
                                y: ${a.cameraPosition[1].toFixed(3)} 
                                z: ${a.cameraPosition[2].toFixed(3)}`,$.textContent=`rx: ${a.cameraRotation[0].toFixed(3)} 
                                ry: ${a.cameraRotation[1].toFixed(3)} `}async function re(o,t){window.addEventListener("keydown",e=>a.keyboardKeys[e.code]=!0),window.addEventListener("keyup",e=>a.keyboardKeys[e.code]=!1),window.addEventListener("mousemove",e=>{document.pointerLockElement&&(a.mouseDelta.x+=e.movementX*a.mouseSensitivity,a.mouseDelta.y+=e.movementY*a.mouseSensitivity,a.mouseDelta.y=Math.max(-1.3,Math.min(1.3,a.mouseDelta.y)))}),J.addEventListener("click",()=>{document.pointerLockElement||(document.body.requestPointerLock(),document.getElementById("main-menu").style.display="none")}),Z.addEventListener("click",()=>{document.getElementById("main-menu").style.display="none",document.body.requestPointerLock()}),Q.forEach((e,r)=>{e.addEventListener("input",i=>{a.lightDirection[r]=parseFloat(i.target.value),o.queue.writeBuffer(t.globalLightDirectionBuffer,0,a.lightDirection)})}),ee.addEventListener("input",e=>{a.bloomStr[0]=parseFloat(e.target.value),o.queue.writeBuffer(t.bloomStrBuffer,0,a.bloomStr)}),k("scene-selector",[{name:"Gryffindor",id:"./scenes/gryffindor.json"},{name:"Book",id:"./scenes/books.json"},{name:"Chicken",id:"./scenes/chickens.json"},{name:"Dumbledor",id:"./scenes/dumbledor.json"},{name:"Potions Class",id:"./scenes/potionclass.json"}],e=>window.engine.loadScene(e)),k("graphics-selector",[{name:"Albedo+Soft Shadows",id:0},{name:"PBR",id:1}],e=>{const r=window.engine;r.graphicsSettings[0]=e,r.device.queue.writeBuffer(r.buffers.graphicsSettingsBuffer,0,new Uint32Array(r.graphicsSettings))}),ie(),oe()}function k(o,t,e){const r=document.getElementById(o);t.forEach(({name:i,id:n})=>{const s=document.createElement("option");s.value=n,s.textContent=i,r.appendChild(s)}),r.addEventListener("change",i=>e(i.target.value))}function ie(){const o={"toggle-bloom":1,"toggle-motion-blur":2,"toggle-exposure":4,"toggle-stylized-shadows":8,"toggle-scanlines":16,"toggle-chromatic-aberration":32,"toggle-random-noise":64,"toggle-posterize":128,"toggle-vignette":256,"toggle-invert-color":512},t=window.engine,e=t.buffers.graphicsSettingsBuffer;function r(){t.graphicsSettings[1]=Object.entries(o).reduce((i,[n,s])=>i|(document.getElementById(n).checked?s:0),0),t.device.queue.writeBuffer(e,0,new Uint32Array(t.graphicsSettings))}document.querySelectorAll('input[type="checkbox"]').forEach(i=>{i.addEventListener("change",r)})}function oe(){document.getElementById("toggle-spheres").addEventListener("change",o=>{a.graphicsSettings.enableLightSpheres=o.target.checked})}class S{constructor(t){this.rotation=p.fromValues(0,0,0),this.position=p.fromValues(0,0,0),this.scale=p.fromValues(1,1,1),this.modelMatrix=b.create(),this.defaultColor=new Float32Array([1,1,1,10]),this.models=[],this.device=t,b.identity(this.modelMatrix)}async addModel(t){var r,i,n,s,u;const e=await V(t);for(const l of e){const d=l,c=d.vertices,h=d.indices,g=d.material,y=(r=g.map)==null?void 0:r.source.data,m=y?this.loadTexture(y):this.createDefaultTexture([200,200,200,255]),x=(i=g.normalMap)==null?void 0:i.source.data,f=x?this.loadTexture(x):this.createDefaultTexture([128,128,255,255]),U=(n=g.roughnessMap)==null?void 0:n.source.data,w=U?this.loadTexture(U):this.createDefaultTexture([128,128,128,255]),G=(s=g.metalnessMap)==null?void 0:s.source.data,T=G?this.loadTexture(G):this.createDefaultTexture([0,0,0,255]),E=(u=g.specularColorMap)==null?void 0:u.source.data,C=E?this.loadTexture(E):this.createDefaultTexture([64,64,64,255]),R=this.device.createBuffer({label:"Vertex Buffer",size:c.length*4,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(R,0,c);const A=this.device.createBuffer({label:"Index Buffer",size:h.length*4,usage:GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST}),F=this.device.createBuffer({label:"Material Attributes Buffer",size:4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(F,0,new Float32Array([g.opacity])),this.device.queue.writeBuffer(A,0,h),this.models.push({name:l.name,vertices:c,indices:h,albedoTexture:m.texture,albedoSampler:m.sampler,normalTexture:f.texture,normalSampler:f.sampler,roughnessTexture:w.texture,roughnessSampler:w.sampler,metalnessTexture:T.texture,metalnessSampler:T.sampler,specularColorTexture:C.texture,specularColorSampler:C.sampler,vertexBuffer:R,indexBuffer:A,isTransparent:g.transparent,materialAttributesBuffer:F})}}updateTransform(){b.identity(this.modelMatrix),b.translate(this.modelMatrix,this.modelMatrix,this.position),b.rotateX(this.modelMatrix,this.modelMatrix,this.rotation[0]),b.rotateY(this.modelMatrix,this.modelMatrix,this.rotation[1]),b.rotateZ(this.modelMatrix,this.modelMatrix,this.rotation[2]),b.scale(this.modelMatrix,this.modelMatrix,this.scale)}loadTexture(t){const e=this.device.createTexture({size:[t.width,t.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});this.device.queue.copyExternalImageToTexture({source:t},{texture:e},[t.width,t.height,1]);const r=this.device.createSampler({magFilter:"linear",minFilter:"linear",addressModeU:"repeat",addressModeV:"repeat",addressModeW:"repeat"});return{texture:e,sampler:r}}createDefaultTexture(t=[0,0,0,255]){const e=this.device.createTexture({size:[1,1,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST}),r=new Uint8Array([t[0],t[1],t[2],t[3]]);this.device.queue.writeTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:0}},r,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});const i=this.device.createSampler({magFilter:"linear",minFilter:"linear"});return{texture:e,sampler:i}}makeDefaultSphere(t=1,e=16,r=16){const i=[],n=[];for(let c=0;c<=e;c++){const h=c*Math.PI/e,g=Math.sin(h),y=Math.cos(h);for(let m=0;m<=r;m++){const x=m*2*Math.PI/r,f=Math.sin(x),w=Math.cos(x)*g,G=y,T=f*g;i.push(t*w,t*G,t*T)}}for(let c=0;c<e;c++)for(let h=0;h<r;h++){const g=c*(r+1)+h,y=g+r+1;n.push(g,y,g+1),n.push(y,y+1,g+1)}const s=new Float32Array(i),u=new Uint32Array(n),l=this.device.createBuffer({label:"Sphere Vertex Buffer",size:s.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(l,0,s);const d=this.device.createBuffer({label:"Sphere Index Buffer",size:u.byteLength,usage:GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(d,0,u),this.models.push({vertices:s,indices:u,vertexBuffer:l,indexBuffer:d})}makeDefaultCube(t=1){const e=t/2,r=[-e,-e,e,e,-e,e,e,e,e,-e,e,e,-e,-e,-e,-e,e,-e,e,e,-e,e,-e,-e,-e,e,-e,-e,e,e,e,e,e,e,e,-e,-e,-e,-e,e,-e,-e,e,-e,e,-e,-e,e,e,-e,-e,e,e,-e,e,e,e,e,-e,e,-e,-e,-e,-e,-e,e,-e,e,e,-e,e,-e],i=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23],n=new Float32Array(r),s=new Uint32Array(i),u=this.device.createBuffer({label:"Cube Vertex Buffer",size:n.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(u,0,n);const l=this.device.createBuffer({label:"Cube Index Buffer",size:s.byteLength,usage:GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST});this.device.queue.writeBuffer(l,0,s),this.models.push({vertices:n,indices:s,vertexBuffer:u,indexBuffer:l})}}class se{constructor(t,e,r){this.device=t,this.bindLayouts=e,this.buffers=r,this.gameObjects=[],this.players={},this.transparentObjects=[],this.pointLightObjects=[],this.pointLightPositionsBuffer=null,this.pointLightColorsBuffer=null,this.skyboxBuffer=null,this.skyboxIndexBuffer=null,this.skyboxBindGroup=null,this.playerModel=null}async loadPlayerModel(t){const e=new S(this.device);await e.addModel(t),this.playerModel=e}addPlayer(t,e){const r={position:[t.x,t.y,t.z],rotation:[0,0,0],scale:[.2,.2,.2]};let i=this.loadObject(this.playerModel.models[0],r);this.players[e]=i}removePlayer(t){this.players[t]&&delete this.players[t]}async loadObjects(){for(const t of this.sceneConfig.objects){const e=new S(this.device);if(await e.addModel(t.model),!e.models||e.models.length===0){console.warn(`No models loaded for ${t.path}`);continue}t.name=e.name;for(const r of e.models){const i=this.loadObject(r,t);i.isTransparent?this.transparentObjects.push(i):this.gameObjects.push(i)}}}loadObject(t,e){const r=new S(this.device);return r.position=p.fromValues(...e.position),r.rotation=p.fromValues(...e.rotation),r.scale=p.fromValues(...e.scale),r.name=e.name,r.vertexBuffer=t.vertexBuffer,r.indexBuffer=t.indexBuffer,r.indices=t.indices,r.isTransparent=t.isTransparent,r.modelMatrixBuffer=this.device.createBuffer({label:"Model Matrix Buffer",size:4*16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),r.bindGroup=I(this.device,this.bindLayouts,this.buffers,r.modelMatrixBuffer,this.pointLightPositionsBuffer,this.pointLightColorsBuffer,t),r}async loadPointLightObjects(){for(const t of this.sceneConfig.lights){const e=new S(this.device);e.makeDefaultSphere();for(const r of e.models)e.position=p.fromValues(...t.position),e.scale=p.fromValues(.5,.5,.5),e.vertexBuffer=r.vertexBuffer,e.indexBuffer=r.indexBuffer,e.indices=r.indices,e.moveable=t.moveable,e.defaultColor=new Float32Array(t.color),e.modelMatrixBuffer=this.device.createBuffer({label:"Model Matrix Buffer",size:4*16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),e.colorBuffer=this.device.createBuffer({label:"Point Light Color Buffer",size:4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(e.colorBuffer,0,new Float32Array(t.color)),e.bindGroup=this.device.createBindGroup({layout:this.bindLayouts.pointLightBindGroupLayout,entries:[{binding:0,resource:{buffer:this.buffers.mvpBuffer}},{binding:1,resource:{buffer:e.modelMatrixBuffer}},{binding:2,resource:{buffer:e.colorBuffer}}]}),this.pointLightObjects.push(e)}this.pointLightPositionsBuffer=this.device.createBuffer({label:"Point Light Positions",size:this.pointLightObjects.length*4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.pointLightColorsBuffer=this.device.createBuffer({label:"Point Light Colors",size:this.pointLightObjects.length*4*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})}async loadSkybox(){const t=new Float32Array([-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1]);this.skyboxBuffer=this.device.createBuffer({size:t.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(this.skyboxBuffer,0,t);const e=new Uint16Array([0,1,2,2,3,0,4,5,6,6,7,4,8,9,10,10,11,8,12,13,14,14,15,12,16,17,18,18,19,16,20,21,22,22,23,20]);this.skyboxIndexBuffer=this.device.createBuffer({size:e.byteLength,usage:GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(this.skyboxIndexBuffer,0,e);const r=[this.sceneConfig.skybox.texture+"/right.jpg",this.sceneConfig.skybox.texture+"/left.jpg",this.sceneConfig.skybox.texture+"/top.jpg",this.sceneConfig.skybox.texture+"/bottom.jpg",this.sceneConfig.skybox.texture+"/front.jpg",this.sceneConfig.skybox.texture+"/back.jpg"],i=await N(this.device,r),n=this.device.createSampler({magFilter:"linear",minFilter:"linear"});this.skyboxBindGroup=this.device.createBindGroup({layout:this.bindLayouts.skyboxBindGroupLayout,entries:[{binding:0,resource:{buffer:this.buffers.mvpBuffer}},{binding:1,resource:{buffer:this.buffers.cameraPositionBuffer}},{binding:2,resource:n},{binding:3,resource:i.createView({dimension:"cube"})}]})}async loadScene(t){try{const e=await fetch(t);if(!e.ok)throw new Error(`Failed to load scene config: ${e.statusText}`);this.sceneConfig=await e.json(),await this.loadPointLightObjects(),await this.loadObjects(),await this.loadSkybox()}catch(e){console.error("Error loading scene:",e)}}}function ne(o,t,e,r){const i=o.createRenderPipeline({label:"Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.mainBindGroupLayout]}),vertex:{module:e.mainShaderModule,entryPoint:"vertexMain",buffers:[{arrayStride:48,attributes:[{format:"float32x3",offset:0,shaderLocation:0},{format:"float32x3",offset:12,shaderLocation:1},{format:"float32x2",offset:24,shaderLocation:2},{format:"float32x4",offset:32,shaderLocation:3}]}]},fragment:{module:e.mainShaderModule,entryPoint:"fragmentMain",targets:[{format:t,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"}}}]},depthStencil:{format:"depth24plus",depthWriteEnabled:!0,depthCompare:"less"}}),n=o.createRenderPipeline({label:"Transparent Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.mainBindGroupLayout]}),vertex:{module:e.mainShaderModule,entryPoint:"vertexMain",buffers:[{arrayStride:12*4,attributes:[{format:"float32x3",offset:0,shaderLocation:0},{format:"float32x3",offset:12,shaderLocation:1},{format:"float32x2",offset:24,shaderLocation:2},{format:"float32x4",offset:32,shaderLocation:3}]}]},fragment:{module:e.mainShaderModule,entryPoint:"fragmentMain",targets:[{format:t,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"}}}]},depthStencil:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"less"}}),s=o.createRenderPipeline({label:"Skybox Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.skyboxBindGroupLayout]}),vertex:{module:e.skyboxShaderModule,entryPoint:"vertexMain",buffers:[{arrayStride:3*4,attributes:[{shaderLocation:0,offset:0,format:"float32x3"}]}]},fragment:{module:e.skyboxShaderModule,entryPoint:"fragmentMain",targets:[{format:t}]},depthStencil:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"less-equal"}}),u=o.createRenderPipeline({label:"Post-Processing Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.postProcessBindGroupLayout]}),vertex:{module:e.postProcessShaderModule,entryPoint:"vertexMain",buffers:[]},fragment:{module:e.postProcessShaderModule,entryPoint:"fragmentMain",targets:[{format:t}]}}),l=o.createRenderPipeline({label:"Point Light Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.pointLightBindGroupLayout]}),vertex:{module:e.pointLightShaderModule,entryPoint:"vertexMain",buffers:[{arrayStride:3*4,attributes:[{format:"float32x3",offset:0,shaderLocation:0}]}]},fragment:{module:e.pointLightShaderModule,entryPoint:"fragmentMain",targets:[{format:t}]},depthStencil:{format:"depth24plus",depthWriteEnabled:!1,depthCompare:"less"}}),d=o.createRenderPipeline({label:"Bloom  Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.bloomBindGroupLayout]}),vertex:{module:e.postProcessShaderModule,entryPoint:"vertexMain",buffers:[]},fragment:{module:e.bloomShaderModule,entryPoint:"bloomMain",targets:[{format:t}]}}),c=o.createRenderPipeline({label:"Bloom  Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.bloomBindGroupLayout]}),vertex:{module:e.postProcessShaderModule,entryPoint:"vertexMain",buffers:[]},fragment:{module:e.bloomShaderModule,entryPoint:"blurVMain",targets:[{format:t}]}}),h=o.createRenderPipeline({label:"Bloom  Pipeline",layout:o.createPipelineLayout({bindGroupLayouts:[r.bloomBindGroupLayout]}),vertex:{module:e.postProcessShaderModule,entryPoint:"vertexMain",buffers:[]},fragment:{module:e.bloomShaderModule,entryPoint:"blurHMain",targets:[{format:t}]}});return{mainPipeline:i,skyboxPipeline:s,postProcessPipeline:u,pointLightPipeline:l,bloomPipeline:d,blurVPipeline:c,blurHPipeline:h,transparentPipeline:n}}function ae(o){const t=o.createBindGroupLayout({label:"Main Bind Group Layout",entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:8,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:9,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:10,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:12,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:13,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:14,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:15,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:16,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:17,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),e=o.createBindGroupLayout({label:"Skybox Bind Group Layout",entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float",viewDimension:"cube"}}]}),r=o.createBindGroupLayout({label:"Point Light Bind Group Layout",entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),i=o.createBindGroupLayout({label:"Bloom Bind Group Layout",entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{}}]}),n=o.createBindGroupLayout({label:"Post-Processing Bind Group Layout",entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]});return{mainBindGroupLayout:t,skyboxBindGroupLayout:e,postProcessBindGroupLayout:n,pointLightBindGroupLayout:r,bloomBindGroupLayout:i}}function ue(o,t){a.cameraRotation[0]=-a.mouseDelta.y,a.cameraRotation[1]=-a.mouseDelta.x;let e=a.cameraRotation[1],r=a.cameraRotation[0],i=p.fromValues(Math.cos(r)*Math.sin(e),Math.sin(r),Math.cos(r)*Math.cos(e)),n=p.fromValues(Math.cos(e),0,-Math.sin(e)),s=p.fromValues(0,1,0);p.cross(n,i,s),a.keyboardKeys.ShiftLeft||a.keyboardKeys.ShiftRight?a.moveSpeed=a.baseMoveSpeed*3.5:a.moveSpeed=a.baseMoveSpeed;let u=a.moveSpeed,l=p.create();a.keyboardKeys.KeyW&&p.scaleAndAdd(l,l,i,u),a.keyboardKeys.KeyS&&p.scaleAndAdd(l,l,i,-u),a.keyboardKeys.KeyA&&p.scaleAndAdd(l,l,n,-u),a.keyboardKeys.KeyD&&p.scaleAndAdd(l,l,n,u),a.keyboardKeys.Space&&p.scaleAndAdd(l,l,s,u),p.add(a.cameraPosition,a.cameraPosition,l),t.sendPlayerPosition(a.cameraPosition,a.cameraRotation);let d=b.create(),c=p.create();p.add(c,a.cameraPosition,i),b.lookAt(d,a.cameraPosition,c,s);let h=b.create();b.perspective(h,Math.PI/4,a.aspect,a.nearCamera,a.farCamer),b.multiply(o,h,d)}class le{constructor(t,e){this.socket=new WebSocket(t),this.scene=e,this.playerId=null,this.initWebHandlers(),window.addEventListener("beforeunload",()=>this.disconnect())}initWebHandlers(){this.socket.onmessage=t=>{const e=JSON.parse(t.data);if(e.type==="init"){this.playerId=e.id;for(const[r,i]of Object.entries(e.players))r!=this.playerId&&this.scene.addPlayer(i,r)}else if(e.type==="new_player"){if(e.id==this.playerId)return;this.scene.addPlayer({x:e.position.x,y:e.position.y,z:e.position.z},e.id)}else if(e.type==="update"){if(e.id==this.playerId)return;this.scene.players[e.id].position[0]=e.position.x,this.scene.players[e.id].position[1]=e.position.y-.65,this.scene.players[e.id].position[2]=e.position.z,this.scene.players[e.id].rotation[0]=-e.position.rx,this.scene.players[e.id].rotation[1]=e.position.ry}else e.type==="remove"&&this.scene.removePlayer(e.id)}}sendPlayerPosition(t,e){this.socket.readyState===WebSocket.OPEN?this.socket.send(JSON.stringify({type:"move",id:this.playerId,position:{x:t[0],y:t[1],z:t[2],rx:e[0],ry:e[1]}})):console.warn("WebSocket not open. Skipping position update.")}disconnect(){this.socket.readyState===WebSocket.OPEN&&(this.socket.send(JSON.stringify({type:"disconnect",id:this.playerId})),this.socket.close())}}class ce{async init(){this.modelViewProjectionMatrix=b.create();const{device:t,context:e,canvas:r,canvasFormat:i}=await H();this.device=t,this.context=e,this.canvasFormat=i,this.canvas=r,this.graphicsSettings=new Uint32Array([0,0,0,0]),this.renderTextureViews=j(this.device,this.canvas,this.canvasFormat),this.shaderModules=await z(this.device),this.buffers=await Y(this.device),this.bindLayouts=ae(this.device),this.postProcessResources=q(this.device,this.bindLayouts,this.renderTextureViews,this.buffers),this.scenesCache={},this.currentSceneName=null,await this.loadScene("./scenes/gryffindor.json"),this.webClient=new le("ws://3.86.154.96:6868",this.scene),this.pipelines=ne(this.device,i,this.shaderModules,this.bindLayouts),this.depthView=await X(this.device,r),this.time=0,re(this.device,this.buffers)}run(){const t=()=>{if(!this.running){requestAnimationFrame(t);return}this.update(this.device,this.buffers,this.modelViewProjectionMatrix);const e=this.device.createCommandEncoder();this.renderScene(e),a.graphicsSettings.enableLightSpheres&&this.renderPointLights(e),this.postProcess(e),this.device.queue.submit([e.finish()]),requestAnimationFrame(t)};requestAnimationFrame(t)}async loadScene(t){if(this.currentSceneName!==t){if(this.running=!1,this.scenesCache[t])this.scene=this.scenesCache[t];else{const e=new S(this.device);this.scene=new se(this.device,this.bindLayouts,this.buffers),await this.scene.loadScene(t),await e.addModel("./resources/chicken/model.glb"),this.scene.playerModel=e,this.scenesCache[t]=this.scene}this.currentSceneName=t,this.running=!0}}unloadScene(){var t,e,r,i;this.scene&&(this.scene.gameObjects.forEach(n=>{var s,u,l;(s=n.vertexBuffer)==null||s.destroy(),(u=n.indexBuffer)==null||u.destroy(),(l=n.modelMatrixBuffer)==null||l.destroy()}),this.scene.pointLightObjects.forEach(n=>{var s;(s=n.modelMatrixBuffer)==null||s.destroy()}),(t=this.scene.skyboxBuffer)==null||t.destroy(),(e=this.scene.skyboxIndexBuffer)==null||e.destroy(),(r=this.scene.pointLightPositionsBuffer)==null||r.destroy(),(i=this.scene.pointLightColorsBuffer)==null||i.destroy(),this.scene=null)}renderScene(t){const e=P(t,this.renderTextureViews.sceneTextureView,this.depthView);this.renderSkybox(e),this.renderObjects(e),e.end()}update(){this.time=performance.now()*.001,te(),ue(this.modelViewProjectionMatrix,this.webClient),this.updatePointLights(),this.device.queue.writeBuffer(this.buffers.mvpBuffer,0,this.modelViewProjectionMatrix),this.device.queue.writeBuffer(this.buffers.cameraPositionBuffer,0,a.cameraPosition)}updatePointLights(){let t=10;const e=this.scene.pointLightObjects.length;if(e===0)return;const r=Math.PI*2/e,i=new Float32Array(e*4),n=new Float32Array(e*4);for(let s=0;s<e;s++){const u=this.scene.pointLightObjects[s];if(u.moveable){const d=this.time*.5+s*r;u.position[0]=Math.cos(d)*t,u.position[2]=Math.sin(d)*t,u.updateTransform()}const l=s*4;i[l]=u.position[0],i[l+1]=u.position[1],i[l+2]=u.position[2],n[l]=u.defaultColor[0],n[l+1]=u.defaultColor[1],n[l+2]=u.defaultColor[2],n[l+3]=u.defaultColor[3]}this.device.queue.writeBuffer(this.scene.pointLightPositionsBuffer,0,i),this.device.queue.writeBuffer(this.scene.pointLightColorsBuffer,0,n)}renderPointLights(t){const e=this.scene,r=P(t,this.renderTextureViews.sceneTextureView,this.depthView,!1,!1);r.setPipeline(this.pipelines.pointLightPipeline);for(const i of e.pointLightObjects)i.updateTransform(),this.device.queue.writeBuffer(i.modelMatrixBuffer,0,i.modelMatrix),r.setVertexBuffer(0,i.vertexBuffer),r.setIndexBuffer(i.indexBuffer,"uint32"),r.setBindGroup(0,i.bindGroup),r.drawIndexed(i.indices.length);r.end()}renderSkybox(t){t.setPipeline(this.pipelines.skyboxPipeline),t.setBindGroup(0,this.scene.skyboxBindGroup),t.setVertexBuffer(0,this.scene.skyboxBuffer),t.setIndexBuffer(this.scene.skyboxIndexBuffer,"uint16"),t.drawIndexed(36)}postProcess(t){this.renderBloom(t),this.combinePostProcess(t)}renderBloom(t){const e=P(t,this.renderTextureViews.bloomTextureView);e.setPipeline(this.pipelines.bloomPipeline),e.setBindGroup(0,this.postProcessResources.bloomBindGroup),e.draw(6),e.end();const r=P(t,this.renderTextureViews.blurHTextureView);r.setPipeline(this.pipelines.blurHPipeline),r.setBindGroup(0,this.postProcessResources.blurHBindGroup),r.draw(6),r.end();const i=P(t,this.renderTextureViews.blurVTextureView);i.setPipeline(this.pipelines.blurVPipeline),i.setBindGroup(0,this.postProcessResources.blurVBindGroup),i.draw(6),i.end()}combinePostProcess(t){const e=P(t,this.context.getCurrentTexture().createView());e.setPipeline(this.pipelines.postProcessPipeline),e.setBindGroup(0,this.postProcessResources.postProcessBindGroup),e.draw(6),e.end()}renderObjects(t){t.setPipeline(this.pipelines.mainPipeline);const e=this.scene;for(let r=0;r<e.gameObjects.length;r++){const i=e.gameObjects[r];i.updateTransform(),t.setVertexBuffer(0,i.vertexBuffer),t.setIndexBuffer(i.indexBuffer,"uint32"),this.device.queue.writeBuffer(i.modelMatrixBuffer,0,i.modelMatrix),t.setBindGroup(0,i.bindGroup),t.drawIndexed(i.indices.length)}for(const[r,i]of Object.entries(e.players))i.updateTransform(),t.setVertexBuffer(0,i.vertexBuffer),t.setIndexBuffer(i.indexBuffer,"uint32"),this.device.queue.writeBuffer(i.modelMatrixBuffer,0,i.modelMatrix),t.setBindGroup(0,i.bindGroup),t.drawIndexed(i.indices.length);t.setPipeline(this.pipelines.transparentPipeline);for(let r=0;r<e.transparentObjects.length;r++){const i=e.transparentObjects[r];i.updateTransform(),t.setVertexBuffer(0,i.vertexBuffer),t.setIndexBuffer(i.indexBuffer,"uint32"),this.device.queue.writeBuffer(i.modelMatrixBuffer,0,i.modelMatrix),t.setBindGroup(0,i.bindGroup),t.drawIndexed(i.indices.length)}}}const L=new ce;window.engine=L;async function de(){console.log("Welcome to Mighty Engine ₍^. .^₎⟆"),await L.init(),L.run()}de();
